{
	"metadata": {
		"version": 2
	},
	"application": {
		"name": "go-k8s",
		"language": "GOLANG",
		"artifact_store": {
			"repositories": null
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"exit_actions": {},
				"properties": [
					{
						"name": "gopath",
						"description": "GOPATH is set to ${SEGMENT_BASE_DIR}/cache/go by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created",
						"value": "${SEGMENT_BASE_DIR}/cache/go"
					}
				],
				"deployment_strategy": {},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				},
				"cache_info": {
					"paths": [
						"((gopath))"
					]
				},
				"tasks": [
					{
						"name": "go-k8s",
						"steps": [
							{
								"name": "Get Dependencies",
								"definition": "Get Dependencies",
								"command": "go get -t -d ./...",
								"properties": null
							},
							{
								"name": "Unit Tests",
								"definition": "Unit Tests",
								"command": "set -o pipefail\nginkgo -cover -r -v -skipPackage=pb,test,mock,proto -outputdir=./ | tee ginkgo.output",
								"properties": null
							},
							{
								"name": "Convert coverage",
								"definition": "Convert coverage",
								"command": "cat ginkgo.output 2\u003e\u00261 | go-junit-report \u003e test.xml\ngocov convert *.coverprofile | gocov-xml \u003e coverage.xml",
								"properties": null
							},
							{
								"name": "Build",
								"definition": "Build",
								"command": "cd app-code\ngo build -o ((application.name))",
								"properties": null
							}
						],
						"docker_options": {}
					}
				]
			},
			{
				"name": "Integration",
				"segment_type": "integration",
				"run_after": [
					"Build"
				],
				"job_steps": [
					{
						"name": "Initialize K8S environment",
						"definition": "Initialize K8S environment",
						"command": "mkdir -p $HOME/.kube\nprintf \"${EKS_CONFIG}\" \u003e $HOME/.kube/config\nchmod 600 $HOME/.kube/config",
						"properties": null
					},
					{
						"name": "helm install app chart",
						"definition": "helm install app chart",
						"command": "helm upgrade -i --atomic ${K8S_APP_NAME} app/helm-chart/\n",
						"properties": null
					},
					{
						"name": "Test application connectivity",
						"definition": "Test application connectivity",
						"command": "export NODE_PORT=$(kubectl get services --namespace default -o jsonpath=\"{.spec.ports[0].port}\" ${K8S_APP_NAME})\nexport NODE_IP=$(kubectl get pod --namespace default -l app=go-k8s -o jsonpath=\"{.items[0].status.podIP}\")\n\necho \"Application is running on: http://$NODE_IP:$NODE_PORT/\"\n\nif [ $(curl -s -o /dev/null -I -w \"%{http_code}\" http://$NODE_IP:$NODE_PORT/) -eq 200 ]; then\necho \"Test passed. Application OK\"\nfi\n\n",
						"properties": null
					},
					{
						"name": "Teardown install",
						"definition": "Teardown install",
						"command": "helm uninstall ${K8S_APP_NAME}",
						"properties": null
					}
				],
				"exit_actions": {},
				"properties": [
					{
						"name": "k8s.app.name",
						"value": "((application.name))-((application.branch))-((application.shortsha))"
					}
				],
				"deployment_strategy": {
					"canaries": 1,
					"max_in_flight": 1,
					"canary_watch_time": "5000-30000",
					"update_watch_time": "5000-30000",
					"serial": false
				},
				"application_init": {},
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				},
				"docker_options": {
					"repository": "pinaki124/kubedeploy"
				},
				"source_code_available": true
			}
		],
		"exit_actions": {
			"default": {
				"code_analysis": {
					"publish": true,
					"properties": null
				}
			}
		},
		"default_properties": null,
		"deployment_files": [],
		"application_init": {
			"command": "bin/start-service.sh"
		},
		"releases": []
	},
	"organization": {
		"orgname": "Tutorial"
	}
}